@page "/serverStatus"

@rendermode InteractiveServer

<h3>服务器状态</h3>

@* <br/> *@
@* @if (!string.IsNullOrWhiteSpace(_errorMessage)) *@
@* { *@
@*     <div class="alert alert-danger"> *@
@*         @_errorMessage *@
@*     </div> *@
@* } *@

@if (_server != null)
{
    <FieldComponent Label="服务器状态">
        <Control>
            <input type="checkbox"
                   @bind-value="@_server.IsOnline"
                   class="form-check-input"/>
        </Control>
    </FieldComponent>
    <br/>
    <button type="button" class="btn btn-primary" @onclick="Save">保存</button>
}

@code {
    [Inject] public required NavigationManager NavigationManager { get; set; }
    [Inject] public required ContainerStorage ContainerStorage { get; set; }
    [Inject] public required IServersRepository ServersRepository { get; set; }

    private Server? _server;
    // private string? _errorMessage;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            _server = ContainerStorage?.GetServer();
            StateHasChanged();
        }
    }

    private async Task Save()
    {
        if (_server == null)
            return;

        ContainerStorage.SetServer(new Server());
        NavigationManager.NavigateTo($"/servers/back_from/{_server.City}");
        await ServersRepository.AddServer(_server);
    }

}