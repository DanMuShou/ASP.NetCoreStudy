@page "/quickGrid"
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h3>QuickGridDemo</h3>
<br>
@if (_servers != null && _servers.Any())
{
    <QuickGrid Items="@_servers.AsQueryable()" Pagination="@_paginationState">
        <PropertyColumn Property="@(s => s.Name)"></PropertyColumn>
        <PropertyColumn Property="@(s => s.City)" Sortable="true"></PropertyColumn>
        
        <TemplateColumn Title="服务器状态" Sortable="true" SortBy="GridSort<Server>.ByAscending(s => s.IsOnline)">
            @if (context.IsOnline)
            {
                <div style="color: green">在线</div>
            }
            else
            {
                <div style="color: red">不在线</div>
            }
        </TemplateColumn>
        
        <TemplateColumn Title="在线人数">
            @if (context.IsOnline)
            {
                var random = new Random();
                var randomNumber = random.Next(0, 10000);
                <text>@randomNumber</text>
            }
            else
            {
                <text>N/A</text>
            }
        </TemplateColumn>
        
        <TemplateColumn>
            <button type="button"
                    class="btn btn-outline-@(context.IsOnline ? "danger" : "success")"
                    @onclick="@(() => { context.IsOnline = !context.IsOnline; })">@(context.IsOnline ? "关闭" : "开启")</button>
            &nbsp;
            <a href="/servers/@context.ServerId" class="btn btn-outline-primary">编辑</a>
        </TemplateColumn>
        
        <TemplateColumn>
            <ChildContent Context="server">
                <EditForm Model="server" FormName="@($"form-server-{server.ServerId}")"
                          OnValidSubmit="@(() => { DeleteServer(server.ServerId); })">
                    <button type="submit" class="btn btn-primary">删除</button>
                </EditForm>
            </ChildContent>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="_paginationState"></Paginator>
}

@code {
    private readonly List<Server>? _servers = ServersRepository.GetServer();

    private PaginationState _paginationState = new() { ItemsPerPage = 5 };
    
    private void DeleteServer(int serverId)
    {
        if (serverId <= 0) return;
        ServersRepository.DeleteServer(serverId);
        // NavigationManager.NavigateTo("/servers", true);
    }
}